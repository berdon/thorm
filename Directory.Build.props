<Project>
  <!-- Set the repository root into a variable -->
  <PropertyGroup>
    <SourceRoot>$(MSBuildThisFileDirectory)</SourceRoot>
  </PropertyGroup>

  <!-- Set common properties regarding assembly information and nuget packages -->
  <PropertyGroup>
    <Authors>Austin Hanson</Authors>
    <Product>Thorm</Product>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/berdon/thorm</PackageProjectUrl>
    <PackageIcon></PackageIcon>
    <PackageTags>ORM C# .NET</PackageTags>
    <PackageReleaseNotes></PackageReleaseNotes>
    <RepositoryUrl>https://github.com/berdon/thorm</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

  <!-- <ItemGroup>
    <None Include="$(SourceRoot)assets/logo_128.png" Pack="true" Visible="false" PackagePath="/" />
  </ItemGroup> -->

  <!-- Common compile parameters -->
  <PropertyGroup>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <NoWarn>$(NoWarn);1591;2003</NoWarn>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <!-- We use full (Windows PDBs) until cross platform support for source link will get better -->
    <DebugType>full</DebugType>
  </PropertyGroup>

  <!-- FSharp SDK overrides -->
  <PropertyGroup>
    <DisableImplicitSystemValueTupleReference>true</DisableImplicitSystemValueTupleReference>
    <DisableImplicitFSharpCoreReference>true</DisableImplicitFSharpCoreReference>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <TestProjectTargetFramework>net461</TestProjectTargetFramework>
  </PropertyGroup>

  <!-- Shared Package Versions -->
  <PropertyGroup>
    <!-- System packages -->

    <!-- Microsoft packages -->
    <MicrosoftBuildVersion>16.3.0</MicrosoftBuildVersion>
    <MicrosoftCodeAnalysisVersion>3.3.1</MicrosoftCodeAnalysisVersion>
    <MicrosoftWin32RegistryVersion>4.6.0</MicrosoftWin32RegistryVersion>
    <MicrosoftBclAsyncInterfacesVersion>1.0.0</MicrosoftBclAsyncInterfacesVersion>

    <!-- 3rd party packages -->

    <!-- Test related packages -->

    <!-- Tooling related packages -->
    <SourceLinkVersion>2.8.3</SourceLinkVersion>
  </PropertyGroup>

  <!-- Versioning properties -->
  <PropertyGroup>
    <AssemblyVersion>0.0.1.0</AssemblyVersion>
    <VersionPrefix Condition=" '$(VersionPrefix)'=='' ">0.0.1</VersionPrefix>
  </PropertyGroup>

  <!-- For Debug builds generated a date/time dependent version suffix -->
  <PropertyGroup Condition=" '$(Configuration)'=='Debug' ">
    <VersionSuffix Condition=" '$(VersionSuffix)'=='' ">dev</VersionSuffix>
    <VersionSuffix Condition=" '$(VersionDateSuffix)'!='' ">$(VersionSuffix)-$(VersionDateSuffix)</VersionSuffix>
  </PropertyGroup>

  <PropertyGroup Condition=" $(FullBuild)=='' ">
    <FullBuild>true</FullBuild>
  </PropertyGroup>

  <!-- Inner dependency versions -->
  <PropertyGroup Condition="$(FullBuild) != 'true'">
    <ThormVersion>0.0.1</ThormVersion>
    <ThormGeneratorVersion>0.0.1</ThormGeneratorVersion>
    <ThormAbstractionsVersion>0.0.1</ThormAbstractionsVersion>
  </PropertyGroup>

  <PropertyGroup Condition="$(FullBuild) == 'true'">
    <ThormVersion>$(VersionPrefix)</ThormVersion>
    <ThormGeneratorVersion>$(VersionPrefix)</ThormGeneratorVersion>
    <ThormAbstractionsVersion>$(VersionPrefix)</ThormAbstractionsVersion>
  </PropertyGroup>

  <!-- Set output folder for created NuGet packages -->
  <PropertyGroup>
    <PackageOutputPath Condition=" '$(PackageOutputPath)'=='' ">$(SourceRoot)/Artifacts/$(Configuration)</PackageOutputPath>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(OfficialBuild)' != 'true'">
      <!-- On non-official builds we don't burn in a git sha.  In large part because it
           hurts our determinism efforts as binaries which should be the same between
           builds will not (due to developers building against different HEAD
           values -->
      <PropertyGroup>
        <GitHeadSha>&lt;developer build&gt;</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(BUILD_SOURCEVERSION)</GitHeadSha>
      </PropertyGroup>
    </When>
    <When Condition="'$(BUILD_SOURCEVERSION)' == '' AND '$(GIT_COMMIT)' != ''">
      <PropertyGroup>
        <GitHeadSha>$(GIT_COMMIT)</GitHeadSha>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <GitHeadSha>Not found</GitHeadSha>
        <DotGitDir>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory).git'))</DotGitDir>
        <HeadFileContent Condition="Exists('$(DotGitDir)/HEAD')">$([System.IO.File]::ReadAllText('$(DotGitDir)/HEAD').Trim())</HeadFileContent>
        <RefPath Condition="$(HeadFileContent.StartsWith('ref: '))">$(DotGitDir)/$(HeadFileContent.Substring(5))</RefPath>
        <GitHeadSha Condition="'$(RefPath)' != '' AND Exists('$(RefPath)')">$([System.IO.File]::ReadAllText('$(RefPath)').Trim())</GitHeadSha>
        <GitHeadSha Condition="'$(HeadFileContent)' != '' AND '$(RefPath)' == ''">$(HeadFileContent)</GitHeadSha>
      </PropertyGroup>
    </Otherwise>
  </Choose>
</Project>